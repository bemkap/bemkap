capa de transporte ahora usa puertos ademas de direccion ip
udp encabezado simple
el checksum se calcula sobre un pseudocabecera que incluye direcciones ip que no son de esa capa pero bueno
tcp
 orientacion de flujo. paquetes llegan ordenados como salen
 circuito virtual. una vez que se establece el circuito no se tiene que especificar cada vez la direccion destino
 transferencia con memoria buffer
 circuito full duplex. para acuses de recibo
 confiabilidad
  por cada paquete se debe recibir un ack como acuse de recibo
  el emisor tiene un temporizador, que no debe ser ni muy largo ni muy corto
  esperar a que se reciba el ack para enviar el siguiente no es eficiente
  ventana deslizante
   se mandan varios paquetes sin esperar los ack de los anteriores. la cantidad depende del tiempo estimado para el retorno del primer ack
   tres punteros. uno donde empieza la ventana(a), donde termina(z) y hasta donde transmiti hasta ahora(p)
   a medida de que voy recibiendo ack muevo los punteros a y z
   si me falta algun ack en el medio la ventana no se corre y no sigo transmitiendo
   los bytes se agrupan en segmentos que se envian juntos
   el receptor manda en los ack el tamaño de ventana que puede manejar (control de flujo)
 extremos de conexion se determinan por el par (direccion,puerto)
 saludo de tres etapas
  se envia un syn con un numero de secuencia aleatorio x en un rango que no se puede repetir en un intervalo de tiempo
  el receptor toma nota del x y manda un syn+ack con su numero y esperando el mensaje x+1
  el primero envia otro ack esperando el y+1
 cierre de conexion
  se envia un paquete fin con numero de secuencia x
  el receptor devuelve un ack con x+1
 cabecera mas compleja que tcp. para tipo de paquete, datos de ventana
 rst para resetear conexion
 psh para forzar el envio de datos inmediatamente, para que no sean guardados en el buffer
 urg para que los datos pasen por encima de los datos enviados antes
 tiempo de vida de los paquetes variables para conexiones de distintas velocidades
 primera opcion
  rtt=(a*old)+((1-a)*new) y terminacion=b*rtt
  para retransmitir paquetes no es eficiente
 algoritmo de kam
 congestionamiento
  se achica el tamaño de ventana. allowed_window=min(received_advertisement,congestion_window) (disminucion multiplicativa)
  cuando ya no hay congestion se va aumentando de a poco de nuevo el tamaño (arranque lento)
  cuando se inicia una congestion tambien se usa el arranque lento
 sindrome de ventana tonta
  cuando un transmisor tiene mucha mas velocidad que el receptor, se va reduciendo mucho el tamaño de ventana
  se puede llegar al extremo en que la cabecera sea mas grande que los datos que se envian por segmento
  una solucion es que el receptor no envia tamaños de ventana muy chicos, envia 0 hasta tener mas lugar en el buffer
  algoritmo de nagle para cuando lo provoca el transmisor